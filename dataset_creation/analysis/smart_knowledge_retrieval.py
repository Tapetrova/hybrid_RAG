#!/usr/bin/env python3
"""
–£–ú–ù–´–ô –ò –≠–ö–û–ù–û–ú–ù–´–ô Knowledge Retrieval
–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–µ API —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ!
"""

import json
import hashlib
from typing import Dict, List, Optional
from pathlib import Path

class SmartKnowledgeRetrieval:
    def __init__(self, tavily_key: str, serper_key: str):
        self.tavily_key = tavily_key
        self.serper_key = serper_key
        
        # –ö–ï–® –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API –≤—ã–∑–æ–≤–æ–≤
        self.cache_file = Path("retrieval_cache.json")
        self.cache = self.load_cache()
        
        # –°—á—ë—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API
        self.api_calls = {
            'tavily': 0,
            'serper': 0,
            'cache_hits': 0
        }
    
    def load_cache(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if self.cache_file.exists():
            with open(self.cache_file, 'r') as f:
                return json.load(f)
        return {}
    
    def save_cache(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à"""
        with open(self.cache_file, 'w') as f:
            json.dump(self.cache, f)
    
    def get_query_hash(self, query: str) -> str:
        """–•–µ—à –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return hashlib.md5(query.encode()).hexdigest()
    
    def should_use_external_api(self, question: str, category: str) -> bool:
        """
        –£–ú–ù–û–ï –†–ï–®–ï–ù–ò–ï: –Ω—É–∂–µ–Ω –ª–∏ –≤–Ω–µ—à–Ω–∏–π –ø–æ–∏—Å–∫?
        –≠–∫–æ–Ω–æ–º–∏–º —Ç–æ–∫–µ–Ω—ã!
        """
        
        # 1. –î–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ - –ù–ï –ù–£–ñ–ï–ù
        if category == 'factual' and len(question.split()) < 10:
            return False
        
        # 2. –î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∫–∞—É–∑–∞–ª—å–Ω—ã—Ö - –ù–£–ñ–ï–ù
        if category == 'causal' and any(word in question.lower() for word in ['why', 'cause', 'reason']):
            return True
        
        # 3. –î–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º - –ù–£–ñ–ï–ù
        if category == 'diagnostic' and any(word in question.lower() for word in ['diagnose', 'troubleshoot', 'multiple']):
            return True
        
        # 4. –î–ª—è —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ - –ú–û–ñ–ï–¢ –ë–´–¢–¨ –ü–û–õ–ï–ó–ï–ù
        if category == 'comparative':
            return True
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º (—ç–∫–æ–Ω–æ–º–∏–º!)
        return False
    
    def retrieve_smart(self, question: str, category: str) -> List[Dict]:
        """
        –£–ú–ù–´–ô retrieval —Å —ç–∫–æ–Ω–æ–º–∏–µ–π API
        """
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
        query_hash = self.get_query_hash(question)
        if query_hash in self.cache:
            self.api_calls['cache_hits'] += 1
            print(f"  üì¶ –ö–µ—à —Ö–∏—Ç! –≠–∫–æ–Ω–æ–º–∏–º API –≤—ã–∑–æ–≤")
            return self.cache[query_hash]
        
        # 2. –†–µ—à–∞–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –≤–Ω–µ—à–Ω–∏–π –ø–æ–∏—Å–∫
        if not self.should_use_external_api(question, category):
            print(f"  üí° –í–Ω–µ—à–Ω–∏–π –ø–æ–∏—Å–∫ –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è: {category}")
            return []  # –ü—É—Å—Ç–æ–π retrieval - –ø—É—Å—Ç—å base_llm —Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
        
        # 3. –ò—Å–ø–æ–ª—å–∑—É–µ–º API –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ
        print(f"  üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π –ø–æ–∏—Å–∫ –¥–ª—è: {category}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞
        keywords = self.extract_key_term(question)
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Tavily
        results = self.search_minimal(keywords)
        
        # –ö–µ—à–∏—Ä—É–µ–º
        self.cache[query_hash] = results
        self.save_cache()
        
        return results
    
    def extract_key_term(self, question: str) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –û–î–ù–û –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        priority_terms = [
            'engine', 'brake', 'transmission', 'clutch', 'battery',
            'alternator', 'radiator', 'suspension', 'exhaust'
        ]
        
        question_lower = question.lower()
        for term in priority_terms:
            if term in question_lower:
                return term
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ
        words = question.split()
        for word in words:
            if len(word) > 4 and word.isalpha():
                return word
        
        return "car repair"  # –î–µ—Ñ–æ–ª—Ç
    
    def search_minimal(self, keyword: str) -> List[Dict]:
        """
        –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô –ø–æ–∏—Å–∫ - —ç–∫–æ–Ω–æ–º–∏–º API!
        """
        import requests
        
        url = "https://api.tavily.com/search"
        
        payload = {
            "api_key": self.tavily_key,
            "query": f"{keyword} automotive technical",
            "search_depth": "basic",  # –°–∞–º—ã–π –¥–µ—à—ë–≤—ã–π
            "max_results": 2,  # –¢–æ–ª—å–∫–æ 2 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!
            "include_answer": False,  # –ù–µ –Ω—É–∂–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
            "include_images": False,  # –ù–µ –Ω—É–∂–Ω—ã –∫–∞—Ä—Ç–∏–Ω–∫–∏
            "include_domains": ["mechanics.stackexchange.com"]  # –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫
        }
        
        try:
            response = requests.post(url, json=payload, timeout=5)
            if response.status_code == 200:
                self.api_calls['tavily'] += 1
                data = response.json()
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ
                results = []
                for r in data.get('results', [])[:2]:
                    results.append({
                        'text': r.get('content', '')[:300],  # –¢–æ–ª—å–∫–æ 300 —Å–∏–º–≤–æ–ª–æ–≤!
                        'score': 0.8,
                        'source': 'tavily'
                    })
                return results
        except:
            pass
        
        return []
    
    def get_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"""
        return {
            'tavily_calls': self.api_calls['tavily'],
            'serper_calls': self.api_calls['serper'],
            'cache_hits': self.api_calls['cache_hits'],
            'cache_size': len(self.cache),
            'money_saved': self.api_calls['cache_hits'] * 0.001  # ~$0.001 per API call
        }

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å eval_runner.py
def get_smart_retrieval(question: str, category: str) -> List[Dict]:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ eval_runner
    """
    retriever = SmartKnowledgeRetrieval(
        tavily_key="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",
        serper_key="4e74a3600041c6fdc32d1a7920f3b32413936ab8"
    )
    
    return retriever.retrieve_smart(question, category)

if __name__ == "__main__":
    # –¢–µ—Å—Ç
    retriever = SmartKnowledgeRetrieval(
        tavily_key="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",
        serper_key="4e74a3600041c6fdc32d1a7920f3b32413936ab8"
    )
    
    test_questions = [
        ("What oil should I use?", "factual"),  # –ù–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API
        ("Why does engine knock?", "causal"),   # –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API
        ("How to diagnose multiple misfires?", "diagnostic"),  # –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API
    ]
    
    for q, cat in test_questions:
        print(f"\n–í–æ–ø—Ä–æ—Å: {q}")
        results = retriever.retrieve_smart(q, cat)
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
    
    print("\n" + "="*60)
    print("–°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    stats = retriever.get_stats()
    for k, v in stats.items():
        print(f"  {k}: {v}")
    print("="*60)