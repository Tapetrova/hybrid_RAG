from enum import Enum
from typing import Union, Optional, Dict

from libs.python.schemas.basic_models import BaseModelUpd, BaseEnum


class PubSubStatusChannel(str, BaseEnum):
    STARTED = "STARTED"
    SUCCESS = "SUCCESS"
    FAILURE = "FAILURE"
    NOTIFICATION = "NOTIFICATION"
    UPDATED = "UPDATED"


class ContentScraperEvent(str, BaseEnum):
    pass


class KnowledgeManagerEvent(str, BaseEnum):
    GOTO_CONTENT_SCRAPER = "GOTO_CONTENT_SCRAPER"
    RECEIVED_RESULTS_FROM_CONTENT_SCRAPER = "RECEIVED_RESULTS_FROM_CONTENT_SCRAPER"
    EMPTY_RETRIEVE_FROM_KNOWLEDGE_DB = "EMPTY_RETRIEVE_FROM_KNOWLEDGE_DB"


class AgentEvent(str, BaseEnum):
    GOTO_TOOL_TO_KNOWLEDGE_MANAGER = "GOTO_TOOL_TO_KNOWLEDGE_MANAGER"
    MAIN_AGENT_ANSWER = "MAIN_AGENT_ANSWER"
    GENERATED_NEXT_USER_STEPS = "GENERATED_NEXT_USER_STEPS"
    SUMMARIZED_FINAL_AGENT_ANSWER = "SUMMARIZED_FINAL_AGENT_ANSWER"
    RECEIVED_RESULTS_FROM_TOOL_TO_KNOWLEDGE_MANAGER = (
        "RECEIVED_RESULTS_FROM_TOOL_TO_KNOWLEDGE_MANAGER"
    )


class EvalMetricEvent(str, BaseEnum):
    UPDATED_METRIC_ACCURACY_COMPARE_TO_FACTKDB = (
        "UPDATED_METRIC_ACCURACY_COMPARE_TO_FACTKDB"
    )
    UPDATED_METRIC_RELEVANCE = "UPDATED_METRIC_RELEVANCE"
    UPDATED_METRIC_CONSISTENCY = "UPDATED_METRIC_CONSISTENCY"
    UPDATED_METRIC_PLAGIARISM = "UPDATED_METRIC_PLAGIARISM"

    UPDATED_METRIC_COMPREHENSIVENESS = "UPDATED_METRIC_COMPREHENSIVENESS"
    UPDATED_METRIC_DIRECTNESS = "UPDATED_METRIC_DIRECTNESS"
    UPDATED_METRIC_DIVERSITY = "UPDATED_METRIC_DIVERSITY"
    UPDATED_METRIC_EMPOWERMENT = "UPDATED_METRIC_EMPOWERMENT"

    METRIC_ACCURACY_COMPARE_TO_FACT_KNOWLEDGE_DB_WAS_OFF = (
        "METRIC_ACCURACY_COMPARE_TO_FACT_KNOWLEDGE_DB_WAS_OFF"
    )
    METRIC_RELEVANCE_WAS_OFF = "METRIC_RELEVANCE_WAS_OFF"
    METRIC_CONSISTENCY_WAS_OFF = "METRIC_CONSISTENCY_WAS_OFF"
    METRIC_PLAGIARISM_WAS_OFF = "METRIC_PLAGIARISM_WAS_OFF"

    METRIC_COMPREHENSIVENESS_WAS_OFF = "METRIC_COMPREHENSIVENESS_WAS_OFF"
    METRIC_DIRECTNESS_WAS_OFF = "METRIC_DIRECTNESS_WAS_OFF"
    METRIC_DIVERSITY_WAS_OFF = "METRIC_DIVERSITY_WAS_OFF"
    METRIC_EMPOWERMENT_WAS_OFF = "METRIC_EMPOWERMENT_WAS_OFF"


class ServiceType(str, BaseEnum):
    AGENT = "AGENT"
    KNOWLEDGE_MANAGER = "KNOWLEDGE_MANAGER"
    CONTENT_SCRAPER = "CONTENT_SCRAPER"
    EVALUATION = "EVALUATION"


class Event(BaseModelUpd):
    status: PubSubStatusChannel
    time_exe_from_start: float
    started_datetime: str
    executed_datetime: str
    service_type: ServiceType
    message: Union[
        str,
        AgentEvent,
        KnowledgeManagerEvent,
        ContentScraperEvent,
        EvalMetricEvent,
    ]


class MessageChannel(BaseModelUpd):
    event: Event
    response: Optional[Dict]
